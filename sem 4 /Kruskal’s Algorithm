#include<iostream>
#include<conio.h>
using namespace std;
int parent[20];
int find(int i)
{
    while(parent[i]!=i)
        i=parent[i];
    return i;
}
void union1(int i,int j)
{
    int a=find(i);
    int b=find(j);
    parent[a]=b;
}
int kruskal(int cost[10][10],int n)
{
    int mincost=0;

    for(int i=1;i<=n;i++)
        parent[i]=i;

    int i=0;

    while(i<n-1)
    {
        int min=0,a=-1,b=-1;
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=n;j++)
            {
                if(find(i)!=find(j) && min == 0 && cost[i][j]!=0)
                {
                    min=cost[i][j];
                    a=i;
                    b=j;
                }
                if(find(i)!=find(j) && cost[i][j]<min && cost[i][j]!=0)
                {
                    min=cost[i][j];
                    a=i;
                    b=j;
                }
            }
        }
        mincost=mincost+min;
        union1(a,b);
        i++;
    }
    return mincost;
}
int main()
{
    int n, mincost;
    int min=99999,k,l;
    int cost[10][10];
    cout<<"Enter the number of edges\n";
    cin >> n;
    cout << "Enter the adjacency matrix\n";
    for(int i=1;i<=n;i++)
    {
        cout<<i<<"=";
        for (int j = 1; j <= n; j++)
        {
            cin >> cost[i][j];
        }
    }
    mincost=kruskal(cost, n);
    cout <<"Mincost is:"<< mincost;
    _getch();
}
